/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.michael.big.data.kafka.java;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DateTimes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6799216033701251779L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DateTimes\",\"namespace\":\"org.michael.big.data.kafka.java\",\"fields\":[{\"name\":\"RawInt\",\"type\":\"int\"},{\"name\":\"RawLong\",\"type\":\"long\"},{\"name\":\"Date\",\"type\":\"int\",\"doc\":\"A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).\",\"logicalType\":\"date\"},{\"name\":\"TimeMilli\",\"type\":\"int\",\"doc\":\"A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.\",\"logicalType\":\"time-millis\"},{\"name\":\"TimeMicro\",\"type\":\"long\",\"doc\":\"A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.\",\"logicalType\":\"time-micros\"},{\"name\":\"TimestampMilli\",\"type\":\"long\",\"doc\":\"A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"TimestampMicro\",\"type\":\"long\",\"doc\":\"A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\",\"logicalType\":\"timestamp-micros\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DateTimes> ENCODER =
      new BinaryMessageEncoder<DateTimes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DateTimes> DECODER =
      new BinaryMessageDecoder<DateTimes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DateTimes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DateTimes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DateTimes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DateTimes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DateTimes from a ByteBuffer. */
  public static DateTimes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int RawInt;
  @Deprecated public long RawLong;
  /** A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar). */
  @Deprecated public int Date;
  /** A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000. */
  @Deprecated public int TimeMilli;
  /** A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000. */
  @Deprecated public long TimeMicro;
  /** A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
  @Deprecated public long TimestampMilli;
  /** A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC. */
  @Deprecated public long TimestampMicro;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DateTimes() {}

  /**
   * All-args constructor.
   * @param RawInt The new value for RawInt
   * @param RawLong The new value for RawLong
   * @param Date A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).
   * @param TimeMilli A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.
   * @param TimeMicro A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.
   * @param TimestampMilli A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param TimestampMicro A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
   */
  public DateTimes(java.lang.Integer RawInt, java.lang.Long RawLong, java.lang.Integer Date, java.lang.Integer TimeMilli, java.lang.Long TimeMicro, java.lang.Long TimestampMilli, java.lang.Long TimestampMicro) {
    this.RawInt = RawInt;
    this.RawLong = RawLong;
    this.Date = Date;
    this.TimeMilli = TimeMilli;
    this.TimeMicro = TimeMicro;
    this.TimestampMilli = TimestampMilli;
    this.TimestampMicro = TimestampMicro;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return RawInt;
    case 1: return RawLong;
    case 2: return Date;
    case 3: return TimeMilli;
    case 4: return TimeMicro;
    case 5: return TimestampMilli;
    case 6: return TimestampMicro;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: RawInt = (java.lang.Integer)value$; break;
    case 1: RawLong = (java.lang.Long)value$; break;
    case 2: Date = (java.lang.Integer)value$; break;
    case 3: TimeMilli = (java.lang.Integer)value$; break;
    case 4: TimeMicro = (java.lang.Long)value$; break;
    case 5: TimestampMilli = (java.lang.Long)value$; break;
    case 6: TimestampMicro = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'RawInt' field.
   * @return The value of the 'RawInt' field.
   */
  public java.lang.Integer getRawInt() {
    return RawInt;
  }

  /**
   * Sets the value of the 'RawInt' field.
   * @param value the value to set.
   */
  public void setRawInt(java.lang.Integer value) {
    this.RawInt = value;
  }

  /**
   * Gets the value of the 'RawLong' field.
   * @return The value of the 'RawLong' field.
   */
  public java.lang.Long getRawLong() {
    return RawLong;
  }

  /**
   * Sets the value of the 'RawLong' field.
   * @param value the value to set.
   */
  public void setRawLong(java.lang.Long value) {
    this.RawLong = value;
  }

  /**
   * Gets the value of the 'Date' field.
   * @return A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).
   */
  public java.lang.Integer getDate() {
    return Date;
  }

  /**
   * Sets the value of the 'Date' field.
   * A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).
   * @param value the value to set.
   */
  public void setDate(java.lang.Integer value) {
    this.Date = value;
  }

  /**
   * Gets the value of the 'TimeMilli' field.
   * @return A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.
   */
  public java.lang.Integer getTimeMilli() {
    return TimeMilli;
  }

  /**
   * Sets the value of the 'TimeMilli' field.
   * A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.
   * @param value the value to set.
   */
  public void setTimeMilli(java.lang.Integer value) {
    this.TimeMilli = value;
  }

  /**
   * Gets the value of the 'TimeMicro' field.
   * @return A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.
   */
  public java.lang.Long getTimeMicro() {
    return TimeMicro;
  }

  /**
   * Sets the value of the 'TimeMicro' field.
   * A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.
   * @param value the value to set.
   */
  public void setTimeMicro(java.lang.Long value) {
    this.TimeMicro = value;
  }

  /**
   * Gets the value of the 'TimestampMilli' field.
   * @return A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   */
  public java.lang.Long getTimestampMilli() {
    return TimestampMilli;
  }

  /**
   * Sets the value of the 'TimestampMilli' field.
   * A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param value the value to set.
   */
  public void setTimestampMilli(java.lang.Long value) {
    this.TimestampMilli = value;
  }

  /**
   * Gets the value of the 'TimestampMicro' field.
   * @return A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
   */
  public java.lang.Long getTimestampMicro() {
    return TimestampMicro;
  }

  /**
   * Sets the value of the 'TimestampMicro' field.
   * A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
   * @param value the value to set.
   */
  public void setTimestampMicro(java.lang.Long value) {
    this.TimestampMicro = value;
  }

  /**
   * Creates a new DateTimes RecordBuilder.
   * @return A new DateTimes RecordBuilder
   */
  public static org.michael.big.data.kafka.java.DateTimes.Builder newBuilder() {
    return new org.michael.big.data.kafka.java.DateTimes.Builder();
  }

  /**
   * Creates a new DateTimes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DateTimes RecordBuilder
   */
  public static org.michael.big.data.kafka.java.DateTimes.Builder newBuilder(org.michael.big.data.kafka.java.DateTimes.Builder other) {
    return new org.michael.big.data.kafka.java.DateTimes.Builder(other);
  }

  /**
   * Creates a new DateTimes RecordBuilder by copying an existing DateTimes instance.
   * @param other The existing instance to copy.
   * @return A new DateTimes RecordBuilder
   */
  public static org.michael.big.data.kafka.java.DateTimes.Builder newBuilder(org.michael.big.data.kafka.java.DateTimes other) {
    return new org.michael.big.data.kafka.java.DateTimes.Builder(other);
  }

  /**
   * RecordBuilder for DateTimes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DateTimes>
    implements org.apache.avro.data.RecordBuilder<DateTimes> {

    private int RawInt;
    private long RawLong;
    /** A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar). */
    private int Date;
    /** A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000. */
    private int TimeMilli;
    /** A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000. */
    private long TimeMicro;
    /** A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
    private long TimestampMilli;
    /** A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC. */
    private long TimestampMicro;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.michael.big.data.kafka.java.DateTimes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.RawInt)) {
        this.RawInt = data().deepCopy(fields()[0].schema(), other.RawInt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.RawLong)) {
        this.RawLong = data().deepCopy(fields()[1].schema(), other.RawLong);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Date)) {
        this.Date = data().deepCopy(fields()[2].schema(), other.Date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TimeMilli)) {
        this.TimeMilli = data().deepCopy(fields()[3].schema(), other.TimeMilli);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.TimeMicro)) {
        this.TimeMicro = data().deepCopy(fields()[4].schema(), other.TimeMicro);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TimestampMilli)) {
        this.TimestampMilli = data().deepCopy(fields()[5].schema(), other.TimestampMilli);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.TimestampMicro)) {
        this.TimestampMicro = data().deepCopy(fields()[6].schema(), other.TimestampMicro);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DateTimes instance
     * @param other The existing instance to copy.
     */
    private Builder(org.michael.big.data.kafka.java.DateTimes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.RawInt)) {
        this.RawInt = data().deepCopy(fields()[0].schema(), other.RawInt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.RawLong)) {
        this.RawLong = data().deepCopy(fields()[1].schema(), other.RawLong);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Date)) {
        this.Date = data().deepCopy(fields()[2].schema(), other.Date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TimeMilli)) {
        this.TimeMilli = data().deepCopy(fields()[3].schema(), other.TimeMilli);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.TimeMicro)) {
        this.TimeMicro = data().deepCopy(fields()[4].schema(), other.TimeMicro);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TimestampMilli)) {
        this.TimestampMilli = data().deepCopy(fields()[5].schema(), other.TimestampMilli);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.TimestampMicro)) {
        this.TimestampMicro = data().deepCopy(fields()[6].schema(), other.TimestampMicro);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'RawInt' field.
      * @return The value.
      */
    public java.lang.Integer getRawInt() {
      return RawInt;
    }

    /**
      * Sets the value of the 'RawInt' field.
      * @param value The value of 'RawInt'.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder setRawInt(int value) {
      validate(fields()[0], value);
      this.RawInt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'RawInt' field has been set.
      * @return True if the 'RawInt' field has been set, false otherwise.
      */
    public boolean hasRawInt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'RawInt' field.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder clearRawInt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'RawLong' field.
      * @return The value.
      */
    public java.lang.Long getRawLong() {
      return RawLong;
    }

    /**
      * Sets the value of the 'RawLong' field.
      * @param value The value of 'RawLong'.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder setRawLong(long value) {
      validate(fields()[1], value);
      this.RawLong = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'RawLong' field has been set.
      * @return True if the 'RawLong' field has been set, false otherwise.
      */
    public boolean hasRawLong() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'RawLong' field.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder clearRawLong() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Date' field.
      * A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).
      * @return The value.
      */
    public java.lang.Integer getDate() {
      return Date;
    }

    /**
      * Sets the value of the 'Date' field.
      * A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).
      * @param value The value of 'Date'.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder setDate(int value) {
      validate(fields()[2], value);
      this.Date = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Date' field has been set.
      * A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).
      * @return True if the 'Date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Date' field.
      * A date logical type annotates an Avro int, where the int stores the number of days from the unix epoch, 1 January 1970 (ISO calendar).
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder clearDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'TimeMilli' field.
      * A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.
      * @return The value.
      */
    public java.lang.Integer getTimeMilli() {
      return TimeMilli;
    }

    /**
      * Sets the value of the 'TimeMilli' field.
      * A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.
      * @param value The value of 'TimeMilli'.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder setTimeMilli(int value) {
      validate(fields()[3], value);
      this.TimeMilli = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'TimeMilli' field has been set.
      * A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.
      * @return True if the 'TimeMilli' field has been set, false otherwise.
      */
    public boolean hasTimeMilli() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'TimeMilli' field.
      * A time-millis logical type annotates an Avro int, where the int stores the number of milliseconds after midnight, 00:00:00.000.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder clearTimeMilli() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'TimeMicro' field.
      * A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.
      * @return The value.
      */
    public java.lang.Long getTimeMicro() {
      return TimeMicro;
    }

    /**
      * Sets the value of the 'TimeMicro' field.
      * A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.
      * @param value The value of 'TimeMicro'.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder setTimeMicro(long value) {
      validate(fields()[4], value);
      this.TimeMicro = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'TimeMicro' field has been set.
      * A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.
      * @return True if the 'TimeMicro' field has been set, false otherwise.
      */
    public boolean hasTimeMicro() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'TimeMicro' field.
      * A time-micros logical type annotates an Avro long, where the long stores the number of microseconds after midnight, 00:00:00.000000.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder clearTimeMicro() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'TimestampMilli' field.
      * A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return The value.
      */
    public java.lang.Long getTimestampMilli() {
      return TimestampMilli;
    }

    /**
      * Sets the value of the 'TimestampMilli' field.
      * A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @param value The value of 'TimestampMilli'.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder setTimestampMilli(long value) {
      validate(fields()[5], value);
      this.TimestampMilli = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'TimestampMilli' field has been set.
      * A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return True if the 'TimestampMilli' field has been set, false otherwise.
      */
    public boolean hasTimestampMilli() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'TimestampMilli' field.
      * A timestamp-millis logical type annotates an Avro long, where the long stores the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder clearTimestampMilli() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'TimestampMicro' field.
      * A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @return The value.
      */
    public java.lang.Long getTimestampMicro() {
      return TimestampMicro;
    }

    /**
      * Sets the value of the 'TimestampMicro' field.
      * A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @param value The value of 'TimestampMicro'.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder setTimestampMicro(long value) {
      validate(fields()[6], value);
      this.TimestampMicro = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'TimestampMicro' field has been set.
      * A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @return True if the 'TimestampMicro' field has been set, false otherwise.
      */
    public boolean hasTimestampMicro() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'TimestampMicro' field.
      * A timestamp-micros logical type annotates an Avro long, where the long stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @return This builder.
      */
    public org.michael.big.data.kafka.java.DateTimes.Builder clearTimestampMicro() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DateTimes build() {
      try {
        DateTimes record = new DateTimes();
        record.RawInt = fieldSetFlags()[0] ? this.RawInt : (java.lang.Integer) defaultValue(fields()[0]);
        record.RawLong = fieldSetFlags()[1] ? this.RawLong : (java.lang.Long) defaultValue(fields()[1]);
        record.Date = fieldSetFlags()[2] ? this.Date : (java.lang.Integer) defaultValue(fields()[2]);
        record.TimeMilli = fieldSetFlags()[3] ? this.TimeMilli : (java.lang.Integer) defaultValue(fields()[3]);
        record.TimeMicro = fieldSetFlags()[4] ? this.TimeMicro : (java.lang.Long) defaultValue(fields()[4]);
        record.TimestampMilli = fieldSetFlags()[5] ? this.TimestampMilli : (java.lang.Long) defaultValue(fields()[5]);
        record.TimestampMicro = fieldSetFlags()[6] ? this.TimestampMicro : (java.lang.Long) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DateTimes>
    WRITER$ = (org.apache.avro.io.DatumWriter<DateTimes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DateTimes>
    READER$ = (org.apache.avro.io.DatumReader<DateTimes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
